link strings

# 0 - Multiplicity
# Given a string x and a character y, how many times does y occur in x?

procedure f0(str, char)
    local n, c
    n := 0
    every char == !str & n+:=1
    return n
end

# Using Unicon's  built-in charcnt(str,char)
procedure f0_b(str, char)
    return charcnt(str, char)
end

# 1 - Trapeze Part
# Given a string x, is it identical when read forwards and backwards?

procedure f1(str)
    local n,i
    n := 0
    every str[i:=1 to *str] == str[*str + 1 - i] & n+:= 1
    return (n = *str & "True") | "False"
end

# Using Unicon's built-in reverse(str)
procedure f1_b(str)
    return (str == reverse(str) & "True") | "False"
end

# 2 - Duplicity
# Given a string x, produce a list of characters which appear more than once in x 

procedure f2(str)
    local all, dup, c
    all := ""
    dup := ""
    every c := !str do
        (find(c, all) & dup ||:= c) | all ||:= c
    return cset(dup)
end

# 3 - Sort Yourself Out
# Given strings x and y, do both strings contain the same letters, possibly in a different order?

procedure f3(s1, s2)
    local i, k
    *s1 ~= *s2 & return "False"
    every i := 1 to *s1 do 
        k := find(s1[i],s2) & s2[k+:1] := ""
    return (s2 == "" & "True") | "False"
end

# 4 - Precious Snowflakes
# Given a string x, find all the characters which occur exactly once, in the order they appear.

procedure f4(str)
    local c, singles
    singles := ""
    every c := !str do 
        charcnt(str,c) = 1 & singles ||:= c          
    return singles
end

# 5 - Musical Chars
# Given strings x and y, is x a rotation of the characters in y?

procedure f5(s1, s2)
    local i
    every i := 1 to *s1 do
        s2 == s1[i+1:0]||s1[1:i+1] & return "True"
    return "False"
end

# 6 - Size Matters
# Given a list of strings x, sort the strings by length, ascending.

procedure f6(alos)
    local i, s, w
    s := []
    every w := !alos do 
        put(s, [w, *w])
    s := sortf(s, 2)
    every i := 1 to *s do 
        s[i] := s[i][1]
    return s
end

# 7 - Popularity Contest
# Given a string x, identify the character which occurs most frequently.
# If more than one character occurs the same number of times,
# you may choose arbitrarily. Is it harder to find all such characters?

procedure f7(str)
    local t, a, m, c
    t := table(0)
    every t[!str] +:= 1
    a := sort(t,2)
    m := a[-1][2]
    t := ""
    every c := !a do 
        c[2] = m & t ||:= c[1]
    return t
end

# 8 - esreveR A ecnetneS
# Given a string x consisting of words (one or more non-space characters)
# which are separated by spaces, reverse the order of the characters in each word.

procedure f8(str)
    local s, sp, t
    s := ""
    sp := ' '
    str || sp ? while t := tab(upto(sp)) & tab(any(sp)) do
        s ||:= reverse(t) || sp
    return s[1:-1]
end

# 9 - Compression Session
# Given a string x and a boolean vector y of the same length,
# extract the characters of x corresponding to a 1 in y.

procedure f9(str, lst)
    local i, a
    a := ""
    every i := 1 to *lst do
        lst[i] = 1 & a ||:= str[i]
    return a
end

# 10 - Expansion Mansion
# Given a string x and a boolean vector y, spread the characters of x
# to the positions of 1s in y, filling intervening characters with underscores.

procedure f10(str, lst)
    local i, k, a
    a := ""
    k := 0
    every i := 1 to *lst do
        a ||:= (lst[i] = 1 & str[k+:=1]) | "_" 
    return a
end

# 11 - C_ns_n_nts
# Given a string x, replace all the vowels (a, e, i, o, u, or y) with underscores.

procedure f11(str)
    local v
    v := 'aoeiuyAOEIUY'
    str ? while tab(upto(v)) & str[&pos+:1] := "_" & move(1)
    return str
end

# 12 - Cnsnnts Rdx
# Given a string x, remove all the vowels entirely.

procedure f12(str)
    local s, v
    s := ""
    v := 'aoeiuyAOEIUY'
    str || 'a' ? while s ||:= tab(upto(v)) & move(1) 
    return s
end

# 13 - TITLE REDACTED
# Given a string x consisting of words separated by spaces (as above),
# and a string y, replace all words in x which are the same as y with a series of xes.

procedure f13(str, word)
    return replace(str, word, repl("X", *word))
end

# 14 - It’s More Fun to Permute
# Given a string x, generate a list of all possible reorderings of the characters in x

procedure f14(str)
    if *str <= 1 then return str
    suspend (str[1] :=: !str) || f14(str[2:0])
end

procedure main()
    write(" 0 - Multiplicity")
    write(f0("fhqwhgads", 'h'))
    write(f0("Mississippi", 's'))
    write(f0("life", '.'))

    write(" 1 - Trapeze Part?")
    every word := ! ["racecar", "wasitaratisaw",  "palindrome"] do write(word, "-> ", f1(word))

    write(f1_b("test"))
    
    write(" 2 - Duplicit")
    every word := ! ["applause", "foo",  "baz"] do write(word, "-> ", f2(word))

    write(" 3 - Sort Yourself Out")
    write(f3("teapot", "toptea"))
    write(f3("apple", "elap"))
    write(f3("listen", "silent"))

    write(" 4 - Precious Snowflakes")
    write(f4("somewhat heterogenous"))
    write(f4("aaabccddefffgg"))

    write(" 5 - Musical Chars")
    write(f5("foobar", "barfoo"))
    write(f5("fboaro", "foobar"))
    write(f5("abcde", "deabc"))

    write(" 6 - Size Matters")
    every write(!f6(["books", "apple", "peanut", "aardvark", "melon", "pie"]))
    
    write(" 7 - Popularity Contest")
    every write(f7(!["abdbbac", "CCCBBBAA", "Mississippi"]))
    
    write(" 8 - esreveR A ecnetneS")
    every write(f8(!["a few words in a sentence", "zoop", "one two three four"]))
    
    write(" 9 - Compression Session")
    write(f9("foobar", [1, 0, 0, 1, 0, 1]))
    write(f9("embiggener", [0, 0, 1, 1, 1, 1, 0, 0, 1, 1]))
    
    write(" 10 - Expansion Mansion")
    write(f10("fbr", [1, 0, 0, 1, 0, 1]))
    write(f10("bigger", [0, 0, 1, 1, 1, 1, 0, 0, 1, 1]))
    
    write(" 11 - C_ns_n_nts")
    every write(f11(!["FLAPJACKS", "Several normal words"]))
    
    write(" 12 - Cnsnnts Rdx")
    every write(f12(!["Several normal words", "FLAPJACKS"]))

    write(" 13 - TITLE REDACTED")
    write(f13("a few words in a sentence", "words"));
    write(f13("one fish two fish", "fish"))
    write(f13("I don't give a care","care"))
    
    write(" 14 - It’s More Fun to Permute")
    every write(f14("abcd"))

end
